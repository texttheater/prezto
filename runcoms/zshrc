#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# z
. ~/git/z/z.sh

# default user
DEFAULT_USER=ke

# editor
EDITOR=vim
VISUAL=vim

# path
PATH=~/go/bin:$PATH
PATH=~/Nextcloud/bin:$PATH
PATH=~/.local/bin:$PATH

# direnv
#eval "$(direnv hook zsh)"

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# pyenv-virtualenv
eval "$(pyenv virtualenv-init -)"

# tmux helper
t() {
  tmux attach -t $1 || tmux new -s $1
}
alias tl="tmux list-sessions"

# open Vim with tabs
alias vim='vim -p'

# default for watch
alias watch='watch -n 1'

# arrow keys browse *local* history
# https://superuser.com/questions/446594/separate-up-arrow-lookback-for-local-and-global-zsh-history
bindkey "${terminfo[kcuu1]}" up-line-or-local-history
bindkey "${terminfo[kcud1]}" down-line-or-local-history
up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-history
    zle set-local-history 0
}
zle -N up-line-or-local-history
down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-history
    zle set-local-history 0
}
zle -N down-line-or-local-history

# clipboard helper
alias cb='xclip -selection clipboard'

# VPN helpers
vpnup() {
  (nordvpn connect ch && nordvpn set killswitch on) || nordvpn login
}
vpndn() {
  nordvpn set killswitch off
  nordvpn disconnect
}

# pyenv helper
mkenv() {
  version=$1
  name=$(basename $(pwd))
  pyenv install -s $version && pyenv virtualenv $version $name && pyenv local $name
}

# opam configuration
[[ ! -r /home/ke/.opam/opam-init/init.zsh ]] || source /home/ke/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

# go ro root of current Git worktree
# adapted from https://stackoverflow.com/a/38843585
# Print the name of the git working tree's root directory
function git_root() {
  local root first_commit
  # git displays its own error if not in a repository
  root=$(git rev-parse --show-toplevel) || return
  if [[ -n $root ]]; then
    echo $root
    return
  elif [[ $(git rev-parse --is-inside-git-dir) = true ]]; then
    # We're inside the .git directory
    # Store the commit id of the first commit to compare later
    # It's possible that $GIT_DIR points somewhere not inside the repo
    first_commit=$(git rev-list --parents HEAD | tail -1) ||
      echo "$0: Can't get initial commit" 2>&1 && false && return
    root=$(git rev-parse --git-dir)/.. &&
      # subshell so we don't change the user's working directory
    ( cd "$root" &&
      if [[ $(git rev-list --parents HEAD | tail -1) = $first_commit ]]; then
        pwd
      else
        echo "$FUNCNAME: git directory is not inside its repository" 2>&1
        false
      fi
    )
  else
    echo "$FUNCNAME: Can't determine repository root" 2>&1
    false
  fi
}
# Change working directory to git repository root
function gr() {
  local root
  root=$(git_root) || return 1  # git_root will print any errors
  cd "$root"
}
